'''Created on May 23, 2019@author: ashto'''from _collections import defaultdictimport Tokenizerimport mathclass InvertedIndex:    def __init__(self):        self.Tokenizer = Tokenizer.Tokenizer()        self.invertedIndex = defaultdict(lambda: defaultdict(lambda: [0,0,0]))        self.totalFileCount = 500 #(74 * 500) - 3        def createInvertedIndex(self, folderNum, numFiles):                for fileNum in range(numFiles):            tokens = self.Tokenizer.generateTokenDict(folderNum, fileNum) #terms and their freqs            tokenLen = len(tokens)            for token in tokens:                filePath = self.Tokenizer.generateFilePath(folderNum, fileNum)                tfScore = 1 + math.log(tokenLen, 10)                self.invertedIndex[token][filePath][0] = tfScore                        self.addIDFandTFIDF(self.invertedIndex)           def addIDFandTFIDF(self, invertedIndex):        for token in invertedIndex:            IDF = self.totalFileCount / len(invertedIndex[token])            print(invertedIndex[token])            print(len(invertedIndex[token]))                        for posting in invertedIndex[token]: #for posting in postings                TF = invertedIndex[token][posting][0]                print(f"TF: {TF}")                invertedIndex[token][posting][1] = IDF                print(f"IDF = {IDF}")                invertedIndex[token][posting][2] = TF * IDF                print(f"TF IDF: {TF * IDF}")                    if __name__ == "__main__":    II = InvertedIndex()    II.createInvertedIndex(0, 500)    #     print(II.invertedIndex)                 