'''Created on May 23, 2019@author: ashto'''from _collections import defaultdictimport Tokenizerimport mathimport picklefrom email.policy import defaultclass InvertedIndex:        def __init__(self):        self.Tokenizer = Tokenizer.Tokenizer()        self.invertedIndex = defaultdict(lambda: defaultdict(lambda: [0,0,0]))        self.totalFileCount = 9 #(74 * 500) - 3        self.postingsGreaterThan2 = []        def createInvertedIndex(self, folderNum, numFiles):        for fileNum in range(numFiles):            tokens = self.Tokenizer.generateTokenDict(folderNum, fileNum) #terms and their freqs            for token in tokens:                filePath = self.Tokenizer.generateFilePath(folderNum, fileNum)                tfScore = 1 + math.log(tokens[token], 10)                self.invertedIndex[token][filePath][0] = tfScore            print(f"Added doc {folderNum}/{fileNum}")                        self.addIDFandTFIDF(self.invertedIndex)                def addIDFandTFIDF(self, invertedIndex):        for token in invertedIndex:            postingsLen = len(invertedIndex[token])            IDF = self.totalFileCount / postingsLen            if postingsLen > 2:                self.postingsGreaterThan2.append(invertedIndex[token])            for posting in invertedIndex[token]: #for posting in postings (filePaths)                TF = invertedIndex[token][posting][0]                invertedIndex[token][posting][1] = IDF                invertedIndex[token][posting][2] = TF * IDF        def dumpIntoPickle(self, invertedIndex):        preparedIndex = dict(invertedIndex) # defaultdicts are difficult to pickle https://www.datacamp.com/community/tutorials/pickle-python-tutorial#whatfor        try:            outPickle = open("InvertedIndex.pickle", "wb")            pickle.dump(preparedIndex, outPickle)                    finally:            outPickle.close()        def loadPickle(self, pickleToLoad):        try:            inPickle = open(pickleToLoad, "rb")            preparedInvertedIndex = pickle.load(inPickle)            invertedIndex = defaultdict(lambda: defaultdict(lambda: [0, 0 ,0]), preparedInvertedIndex)                    finally:            inPickle.close()                    def printInvertedIndex(self, invertedIndex):        for key, val in invertedIndex.items():            print(f"KEY: {key}, VALUE: {val}")            for key2, val2 in val.items():                print(f"\t KEY2: {key2}, VALUE2: {val2}")                if __name__ == "__main__":    II = InvertedIndex()    II.createInvertedIndex(0, 9)                  